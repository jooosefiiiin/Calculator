'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.converter = exports.convertFloatToBinary = exports.convertIntegerToBinary = undefined;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var convertIntegerToBinary = exports.convertIntegerToBinary = function convertIntegerToBinary(number) {
  var result = [];
  console.log('\nConverting Integer ' + number + ' to binary');
  while (number !== 0) {
    console.log('\n' + number + ' % 2 = ' + number % 2);
    console.log(number + ' / 2 = ' + (number / 2 | 0));
    result.push(number % 2);
    number = number / 2 | 0;
  }
  var answer = _lodash2.default.reverse(result).join('');
  console.log('\n[Answer = ' + answer + ']');
  return answer;
};

var convertFloatToBinary = exports.convertFloatToBinary = function convertFloatToBinary(number) {
  var result = [];
  console.log('\nConverting Float ' + number + ' to binary');
  while (!_lodash2.default.has(result, number) && number % 1 !== parseFloat(0)) {
    console.log('\n' + number + ' * 2 = ' + number * 2);
    number *= 2;
    console.log('' + (number | 0));
    result.push(number | 0 === 1 ? 1 : 0);
    number %= 1;
    if (result.length > 10) break;
  }
  var answer = '0.' + result.join('');
  console.log('\n[Answer = ' + answer + ']');
  return answer;
};

var converter = exports.converter = function converter(number) {
  var intPart = number | 0;
  var floatPart = number % 1;
  var resultIntPart = convertIntegerToBinary(intPart);
  var resultFloatPart = convertFloatToBinary(floatPart).split('.').pop();
  var result = resultIntPart + '.' + resultFloatPart;
  console.log('======== binary of ' + number + ' is ' + result + ' ========');
  return result;
};