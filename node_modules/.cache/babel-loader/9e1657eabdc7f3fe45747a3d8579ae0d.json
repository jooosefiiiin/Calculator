{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.converter = exports.convertFloatToBinary = exports.convertIntegerToBinary = undefined;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar convertIntegerToBinary = exports.convertIntegerToBinary = function convertIntegerToBinary(number) {\n  var result = [];\n  console.log('\\nConverting Integer ' + number + ' to binary');\n\n  while (number !== 0) {\n    console.log('\\n' + number + ' % 2 = ' + number % 2);\n    console.log(number + ' / 2 = ' + (number / 2 | 0));\n    result.push(number % 2);\n    number = number / 2 | 0;\n  }\n\n  var answer = _lodash2.default.reverse(result).join('');\n\n  console.log('\\n[Answer = ' + answer + ']');\n  return answer;\n};\n\nvar convertFloatToBinary = exports.convertFloatToBinary = function convertFloatToBinary(number) {\n  var result = [];\n  console.log('\\nConverting Float ' + number + ' to binary');\n\n  while (!_lodash2.default.has(result, number) && number % 1 !== parseFloat(0)) {\n    console.log('\\n' + number + ' * 2 = ' + number * 2);\n    number *= 2;\n    console.log('' + (number | 0));\n    result.push(number | 0 === 1 ? 1 : 0);\n    number %= 1;\n    if (result.length > 10) break;\n  }\n\n  var answer = '0.' + result.join('');\n  console.log('\\n[Answer = ' + answer + ']');\n  return answer;\n};\n\nvar converter = exports.converter = function converter(number) {\n  var intPart = number | 0;\n  var floatPart = number % 1;\n  var resultIntPart = convertIntegerToBinary(intPart);\n  var resultFloatPart = convertFloatToBinary(floatPart).split('.').pop();\n  var result = resultIntPart + '.' + resultFloatPart;\n  console.log('======== binary of ' + number + ' is ' + result + ' ========');\n  return result;\n};","map":{"version":3,"sources":["/Users/josefinschonqvist/Desktop/calculator/calculator8/node_modules/decimal-to-binary-converter/lib/converter.js"],"names":["Object","defineProperty","exports","value","converter","convertFloatToBinary","convertIntegerToBinary","undefined","_lodash","require","_lodash2","_interopRequireDefault","obj","__esModule","default","number","result","console","log","push","answer","reverse","join","has","parseFloat","length","intPart","floatPart","resultIntPart","resultFloatPart","split","pop"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.converter = exports.convertFloatToBinary = exports.convertIntegerToBinary = undefined;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar convertIntegerToBinary = exports.convertIntegerToBinary = function convertIntegerToBinary(number) {\n  var result = [];\n  console.log('\\nConverting Integer ' + number + ' to binary');\n  while (number !== 0) {\n    console.log('\\n' + number + ' % 2 = ' + number % 2);\n    console.log(number + ' / 2 = ' + (number / 2 | 0));\n    result.push(number % 2);\n    number = number / 2 | 0;\n  }\n  var answer = _lodash2.default.reverse(result).join('');\n  console.log('\\n[Answer = ' + answer + ']');\n  return answer;\n};\n\nvar convertFloatToBinary = exports.convertFloatToBinary = function convertFloatToBinary(number) {\n  var result = [];\n  console.log('\\nConverting Float ' + number + ' to binary');\n  while (!_lodash2.default.has(result, number) && number % 1 !== parseFloat(0)) {\n    console.log('\\n' + number + ' * 2 = ' + number * 2);\n    number *= 2;\n    console.log('' + (number | 0));\n    result.push(number | 0 === 1 ? 1 : 0);\n    number %= 1;\n    if (result.length > 10) break;\n  }\n  var answer = '0.' + result.join('');\n  console.log('\\n[Answer = ' + answer + ']');\n  return answer;\n};\n\nvar converter = exports.converter = function converter(number) {\n  var intPart = number | 0;\n  var floatPart = number % 1;\n  var resultIntPart = convertIntegerToBinary(intPart);\n  var resultFloatPart = convertFloatToBinary(floatPart).split('.').pop();\n  var result = resultIntPart + '.' + resultFloatPart;\n  console.log('======== binary of ' + number + ' is ' + result + ' ========');\n  return result;\n};"]},"metadata":{},"sourceType":"script"}